export interface YouTubeIFrameApi {
    Player: YouTubePlayerConstructor;
}
export interface YouTubePlayerConstructor {
    new (elementId: string, config: YouTubeConfig): YouTubePlayer;
}
export interface VideoLoadingInfo {
    videoId: string;
    startSeconds: number | string;
    endSeconds: number | string;
}
export interface PlaylistLoadingInfo {
    listType: string;
    list: string;
    index?: number | string;
    startSeconds?: number | string;
}
interface YouTubeSphericalProperties {
    yaw: number;
    pitch: number;
    roll: number;
    fov: number;
    enableOrientationSensor: boolean;
}
export interface YouTubePlayer {
    loadVideoById(videoId: string, startSeconds?: number | string, endSeconds?: number | string): void;
    loadVideoById(data: VideoLoadingInfo): void;
    cueVideoById(videoId: string, startSeconds?: number | string, endSeconds?: number | string): void;
    cueVideoById(data: VideoLoadingInfo): void;
    cueVideoByUrl(videoId: string, startSeconds?: number | string, endSeconds?: number | string): void;
    cueVideoByUrl(data: VideoLoadingInfo): void;
    loadVideoByUrl(videoId: string, startSeconds?: number | string, endSeconds?: number | string): void;
    loadVideoByUrl(data: VideoLoadingInfo): void;
    cuePlaylist(playlist: string | string[], index?: number | string, startSeconds?: number | string): void;
    cuePlaylist(data: PlaylistLoadingInfo): void;
    loadPlaylist(playlist: string | string[], index?: number | string, startSeconds?: number | string): void;
    loadPlaylist(data: PlaylistLoadingInfo): void;
    playVideo(): void;
    pauseVideo(): void;
    stopVideo(): void;
    seekTo(seconds: number | string, allowSeekAhead: boolean): void;
    getSphericalProperties(): Omit<YouTubeSphericalProperties, 'enableOrientationSensor'>;
    setSphericalProperties(newProperties: YouTubeSphericalProperties): void;
    nextVideo(): void;
    previousVideo(): void;
    playVideoAt(index: number): void;
    mute(): void;
    unMute(): void;
    isMuted(): void;
    setVolume(newVolume: number): void;
    getVolume(): number;
    getPlaybackRate(): number;
    setPlaybackRate(newPlaybackRate: number): number;
    getAvailablePlaybackRates(): number[];
    setSize(width: number | 'string', height: number | 'string'): void;
    setLoop(isLooping: boolean): void;
    setShuffle(isShuffling: boolean): void;
    getVideoLoadedFraction(): number;
    getPlayerState(): YouTubeNumericPlayerState;
    getDuration(): number;
    getVideoUrl(): string;
    getPlaylist(): string[];
    getPlaylistIndex(): number;
    addEventListener(event: string, listener: string): void;
    removeEventListener(event: string, listener: string): void;
    getIframe(): HTMLIFrameElement;
    destroy(): void;
}
export interface YouTubeConfig {
    height: number | string;
    width: number | string;
    videoId: string;
    host: string;
    playerVars?: PlayerVariables;
    events?: YoutubePlayerOldEvents;
}
export declare type YouTubePlayerColor = 'red' | 'white';
export declare type YouTubePlayerIVLoadPolicy = 1 | 3;
export declare type YouTubePlayerListType = 'playlist' | 'user_uploads';
export interface IntermediateYouTubePlayerVariables {
    autoplay: NumericBoolean;
    cc_lang_pref: ISO6391TwoLetterLanguageCode | undefined;
    cc_load_policy: NumericBoolean;
    color: YouTubePlayerColor;
    controls: NumericBoolean;
    disablekb: NumericBoolean;
    enablejsapi: NumericBoolean;
    end: number | string;
    fs: NumericBoolean;
    hl: ISO6391TwoLetterLanguageCode;
    iv_load_policy: YouTubePlayerIVLoadPolicy;
    list: string;
    listType: YouTubePlayerListType;
    loop: NumericBoolean;
    modestbranding: NumericBoolean;
    origin: string;
    playlist: string;
    playsinline: NumericBoolean;
    rel: NumericBoolean;
    start: number | string;
    widget_referrer: string;
}
export interface IntermediateYouTubePlayerEvents {
    onReady: (event: YouTubeEvent<undefined>) => void;
    onStateChange: (event: YouTubeEvent<YouTubeNumericPlayerState>) => void;
    onPlaybackQualityChange: (event: YouTubeEvent<YouTubePlayerQualitySetting>) => void;
    onPlaybackRateChange: (event: YouTubeEvent<number>) => void;
    onError: (event: YouTubeEvent<YouTubeNumericPlayerError>) => void;
    onApiChange: (event: any) => void;
}
export declare type PlayerVariables = Partial<IntermediateYouTubePlayerVariables>;
export declare type YoutubePlayerOldEvents = Partial<IntermediateYouTubePlayerEvents>;
export declare type NumericBoolean = 0 | 1;
export declare type ISO6391TwoLetterLanguageCode = string & {
    length: 2;
};
export interface YouTubeEvent<T> {
    data: T;
    target: any;
}
export declare type YouTubePlayerQualitySetting = 'small' | 'medium' | 'large' | 'hd720' | 'hd1080' | 'highres';
export declare type YouTubeNumericPlayerState = -1 | 0 | 1 | 2 | 3 | 5;
export declare const YouTubePlayerState: {
    UNSTARTED: number;
    ENDED: number;
    PLAYING: number;
    PAUSED: number;
    BUFFERING: number;
    VIDEO_CUED: number;
};
export declare type YouTubeNumericPlayerError = 2 | 5 | 100 | 101 | 150;
export {};
