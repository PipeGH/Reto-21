import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { ISO6391TwoLetterLanguageCode, YouTubeConfig, YouTubeIFrameApi, YouTubeNumericPlayerError, YouTubeNumericPlayerState, YouTubePlayer, YouTubePlayerColor, YouTubePlayerIVLoadPolicy, YouTubePlayerListType, YouTubePlayerQualitySetting } from '../../interfaces/src/youtube-api';
import { YouTubeIFrameApiService, YouTubePlayerManagerService } from "../../interfaces/src/services";
import * as i0 from "@angular/core";
export declare class YouTubePlayerComponent implements OnInit, OnDestroy {
    private playerManager;
    private iFrameApi;
    protected htmlIdPrefix: string;
    protected privateHost: string;
    protected nonPrivateHost: string;
    protected subscriptions: Subscription[];
    ready: EventEmitter<void>;
    stateChange: EventEmitter<YouTubeNumericPlayerState>;
    playbackQualityChange: EventEmitter<YouTubePlayerQualitySetting>;
    errorOccurrence: EventEmitter<YouTubeNumericPlayerError>;
    playbackRateChange: EventEmitter<number>;
    apiChange: EventEmitter<unknown>;
    playerChange: EventEmitter<YouTubePlayer>;
    protected _id: BehaviorSubject<string>;
    protected _width: number;
    protected _height: number;
    protected _videoId: string;
    protected _player: BehaviorSubject<YouTubePlayer | undefined>;
    protected _autoplay: boolean;
    protected _ccLangPref: ISO6391TwoLetterLanguageCode | undefined;
    protected _ccLoadPolicy: boolean;
    protected _color: YouTubePlayerColor;
    protected _controls: boolean;
    protected _disablekb: boolean;
    protected _enablejsapi: boolean;
    protected _end: number | undefined;
    protected _fs: boolean;
    protected _hl: ISO6391TwoLetterLanguageCode | undefined;
    protected _ivLoadPolicy: YouTubePlayerIVLoadPolicy;
    protected _list: string | undefined;
    protected _listType: YouTubePlayerListType | undefined;
    protected _loop: boolean;
    protected _modestbranding: boolean;
    protected _origin: string | undefined;
    protected _playlist: string | undefined;
    protected _playsinline: boolean | undefined;
    protected _rel: boolean;
    _start: number;
    protected _widgetReferrer: string | undefined;
    get autoplay(): boolean;
    set autoplay(newAutoPlay: boolean);
    get ccLangPref(): ISO6391TwoLetterLanguageCode | undefined;
    set ccLangPref(newCcLangPref: ISO6391TwoLetterLanguageCode | undefined);
    get ccLoadPolicy(): boolean;
    set ccLoadPolicy(newCcLoadPolicy: boolean);
    get color(): YouTubePlayerColor;
    set color(newColor: YouTubePlayerColor);
    get controls(): boolean;
    set controls(newControls: boolean);
    get disablekb(): boolean;
    set disablekb(newDisablekb: boolean);
    get enablejsapi(): boolean;
    set enablejsapi(newEnablejsapi: boolean);
    get end(): number;
    set end(newEnd: number);
    get fs(): boolean;
    set fs(newFs: boolean);
    get hl(): ISO6391TwoLetterLanguageCode | undefined;
    set hl(newHl: ISO6391TwoLetterLanguageCode | undefined);
    get ivLoadPolicy(): YouTubePlayerIVLoadPolicy;
    set ivLoadPolicy(newIvLoadPolicy: YouTubePlayerIVLoadPolicy);
    get list(): string | undefined;
    set list(newList: string | undefined);
    get listType(): YouTubePlayerListType | undefined;
    set listType(newListType: YouTubePlayerListType | undefined);
    get loop(): boolean;
    set loop(newLoop: boolean);
    get modestbranding(): boolean;
    set modestbranding(newModestbranding: boolean);
    get origin(): string | undefined;
    set origin(newOrigin: string | undefined);
    get playlist(): string | undefined;
    set playlist(newPlaylist: string | undefined);
    get playsinline(): boolean | undefined;
    set playsinline(newPlaysinline: boolean | undefined);
    get rel(): boolean;
    set rel(newRel: boolean);
    get start(): number;
    set start(newStart: number);
    get widgetReferrer(): string | undefined;
    set widgetReferrer(newWidgetReferrer: string | undefined);
    htmlElementId: string;
    private _private;
    get private(): boolean;
    set private(newPrivate: boolean);
    get id(): string;
    set id(newId: string);
    get height(): number;
    set height(newHeight: number);
    get width(): number;
    set width(newWidth: number);
    get videoId(): string;
    set videoId(newVideoId: string);
    protected get api(): YouTubeIFrameApi | undefined;
    get player(): YouTubePlayer | undefined;
    protected set player(newPlayer: YouTubePlayer | undefined);
    constructor(playerManager: YouTubePlayerManagerService, iFrameApi: YouTubeIFrameApiService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    setupPlayerWithCurrentSetting(): void;
    setupPlayerWith(elementId: string, config: Omit<YouTubeConfig, 'events'>): void;
    private addToPlayerManager;
    static ɵfac: i0.ɵɵFactoryDeclaration<YouTubePlayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<YouTubePlayerComponent, "g-youtube-player", never, { "autoplay": "autoplay"; "ccLangPref": "ccLangPref"; "ccLoadPolicy": "ccLoadPolicy"; "color": "color"; "controls": "controls"; "disablekb": "disablekb"; "enablejsapi": "enablejsapi"; "end": "end"; "fs": "fs"; "hl": "hl"; "ivLoadPolicy": "ivLoadPolicy"; "list": "list"; "listType": "listType"; "loop": "loop"; "modestbranding": "modestbranding"; "origin": "origin"; "playlist": "playlist"; "playsinline": "playsinline"; "rel": "rel"; "start": "start"; "widgetReferrer": "widgetReferrer"; "private": "private"; "id": "id"; "height": "height"; "width": "width"; "videoId": "videoId"; }, { "ready": "ready"; "stateChange": "stateChange"; "playbackQualityChange": "playbackQualityChange"; "errorOccurrence": "errorOccurrence"; "playbackRateChange": "playbackRateChange"; "apiChange": "apiChange"; "playerChange": "playerChange"; }, never, never>;
}
