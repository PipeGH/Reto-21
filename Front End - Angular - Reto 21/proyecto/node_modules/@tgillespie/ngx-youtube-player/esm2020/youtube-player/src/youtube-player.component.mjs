import { Component, EventEmitter, Input, Output, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { v4 } from 'uuid';
import { YouTubeIFrameApiService, YouTubePlayerManagerService } from "../../interfaces/src/services";
import * as i0 from "@angular/core";
import * as i1 from "../../interfaces/src/services";
const booleanToNumericBoolean = (inputBoolean) => {
    if (inputBoolean === undefined)
        return undefined;
    return inputBoolean ? 1 : 0;
};
export class YouTubePlayerComponent {
    constructor(playerManager, iFrameApi) {
        this.playerManager = playerManager;
        this.iFrameApi = iFrameApi;
        this.htmlIdPrefix = 'ytPlayer-';
        this.privateHost = 'https://www.youtube-nocookie.com';
        this.nonPrivateHost = 'https://www.youtube.com';
        this.subscriptions = [];
        // IFrame API
        this.ready = new EventEmitter();
        this.stateChange = new EventEmitter();
        this.playbackQualityChange = new EventEmitter();
        this.errorOccurrence = new EventEmitter();
        this.playbackRateChange = new EventEmitter();
        this.apiChange = new EventEmitter();
        // Library
        this.playerChange = new EventEmitter();
        this._id = new BehaviorSubject(v4());
        this._width = 640;
        this._height = 390;
        this._player = new BehaviorSubject(undefined);
        this._autoplay = false;
        this._ccLangPref = undefined;
        this._ccLoadPolicy = false;
        this._color = 'red';
        this._controls = true;
        this._disablekb = false;
        this._enablejsapi = false;
        this._fs = true;
        this._hl = undefined;
        this._ivLoadPolicy = 1;
        this._list = undefined;
        this._listType = undefined;
        this._loop = false;
        this._modestbranding = false;
        this._origin = undefined;
        this._playlist = undefined;
        this._playsinline = undefined;
        this._rel = false;
        this._start = 0;
        this._widgetReferrer = undefined;
        this.htmlElementId = this.htmlIdPrefix + this.id;
        this._private = true;
        this.subscriptions.push(this.iFrameApi.apiChange.subscribe({
            error: (err) => {
                throw err;
            },
        }));
    }
    get autoplay() {
        return this._autoplay;
    }
    set autoplay(newAutoPlay) {
        this._autoplay = newAutoPlay;
        this.setupPlayerWithCurrentSetting();
    }
    get ccLangPref() {
        return this._ccLangPref;
    }
    set ccLangPref(newCcLangPref) {
        this._ccLangPref = newCcLangPref;
        this.setupPlayerWithCurrentSetting();
    }
    get ccLoadPolicy() {
        return this._ccLoadPolicy;
    }
    set ccLoadPolicy(newCcLoadPolicy) {
        this._ccLoadPolicy = newCcLoadPolicy;
        this.setupPlayerWithCurrentSetting();
    }
    get color() {
        return this._color;
    }
    set color(newColor) {
        this._color = newColor;
        this.setupPlayerWithCurrentSetting();
    }
    get controls() {
        return this._controls;
    }
    set controls(newControls) {
        this._controls = newControls;
        this.setupPlayerWithCurrentSetting();
    }
    get disablekb() {
        return this._disablekb;
    }
    set disablekb(newDisablekb) {
        this._disablekb = newDisablekb;
        this.setupPlayerWithCurrentSetting();
    }
    get enablejsapi() {
        return this._enablejsapi;
    }
    set enablejsapi(newEnablejsapi) {
        this._enablejsapi = newEnablejsapi;
        this.setupPlayerWithCurrentSetting();
    }
    get end() {
        return this._start;
    }
    set end(newEnd) {
        this._start = newEnd;
        this.setupPlayerWithCurrentSetting();
    }
    get fs() {
        return this._fs;
    }
    set fs(newFs) {
        this._fs = newFs;
        this.setupPlayerWithCurrentSetting();
    }
    get hl() {
        return this._hl;
    }
    set hl(newHl) {
        this._hl = newHl;
        this.setupPlayerWithCurrentSetting();
    }
    get ivLoadPolicy() {
        return this._ivLoadPolicy;
    }
    set ivLoadPolicy(newIvLoadPolicy) {
        this._ivLoadPolicy = newIvLoadPolicy;
        this.setupPlayerWithCurrentSetting();
    }
    get list() {
        return this._list;
    }
    set list(newList) {
        this._list = newList;
        if (newList && this.listType) {
            this.player?.loadPlaylist({
                list: newList,
                listType: this.listType,
            });
        }
    }
    get listType() {
        return this._listType;
    }
    set listType(newListType) {
        this._listType = newListType;
        if (newListType && this.list) {
            this.player?.loadPlaylist({
                list: this.list,
                listType: newListType,
            });
        }
    }
    get loop() {
        return this._loop;
    }
    set loop(newLoop) {
        this._loop = newLoop;
        this.player?.setLoop(newLoop);
    }
    get modestbranding() {
        return this._modestbranding;
    }
    set modestbranding(newModestbranding) {
        this._modestbranding = newModestbranding;
        this.setupPlayerWithCurrentSetting();
    }
    get origin() {
        return this._origin;
    }
    set origin(newOrigin) {
        this._origin = newOrigin;
        this.setupPlayerWithCurrentSetting();
    }
    get playlist() {
        return this._playlist;
    }
    set playlist(newPlaylist) {
        this._playlist = newPlaylist;
        this.setupPlayerWithCurrentSetting();
    }
    get playsinline() {
        return this._playsinline;
    }
    set playsinline(newPlaysinline) {
        this._playsinline = newPlaysinline;
        this.setupPlayerWithCurrentSetting();
    }
    get rel() {
        return this._rel;
    }
    set rel(newRel) {
        this._rel = newRel;
        this.setupPlayerWithCurrentSetting();
    }
    get start() {
        return this._start;
    }
    set start(newStart) {
        this._start = newStart;
        this.setupPlayerWithCurrentSetting();
    }
    get widgetReferrer() {
        return this._widgetReferrer;
    }
    set widgetReferrer(newWidgetReferrer) {
        this._widgetReferrer = newWidgetReferrer;
        this.setupPlayerWithCurrentSetting();
    }
    get private() {
        return this._private;
    }
    set private(newPrivate) {
        if (this._private !== newPrivate) {
            this._private = newPrivate;
            this.setupPlayerWithCurrentSetting();
        }
    }
    get id() {
        return this._id.value;
    }
    set id(newId) {
        const prevId = this._id.value;
        if (this.playerManager.has(prevId)) {
            this.playerManager.delete(prevId);
        }
        this._id.next(newId);
        if (this.player) {
            this.addToPlayerManager(this.player);
        }
        this.htmlElementId = this.htmlIdPrefix + newId;
    }
    get height() {
        return this._height;
    }
    set height(newHeight) {
        this._height = newHeight;
        this.player?.setSize(this.width, this.height);
    }
    get width() {
        return this._width;
    }
    set width(newWidth) {
        this._width = newWidth;
        this.player?.setSize(this.width, this.height);
    }
    get videoId() {
        return this._videoId;
    }
    set videoId(newVideoId) {
        this._videoId = newVideoId;
        this.player?.loadVideoById(this.videoId, this.start);
    }
    get api() {
        return this.iFrameApi.api;
    }
    get player() {
        return this._player.value;
    }
    set player(newPlayer) {
        this._player.next(newPlayer);
    }
    ngOnInit() {
        this.subscriptions.push(this._player.subscribe((newPlayer) => {
            this.playerChange.emit(newPlayer);
        }));
        this.setupPlayerWithCurrentSetting();
    }
    ngOnDestroy() {
        this.subscriptions.forEach((x) => x.unsubscribe());
        this.ready.complete();
        this.stateChange.complete();
        this.apiChange.complete();
        this.playbackRateChange.complete();
        this.playbackQualityChange.complete();
        this.playerChange.complete();
        this.ready.complete();
        this.stateChange.complete();
        this.apiChange.complete();
        this.playbackQualityChange.complete();
        this.playbackRateChange.complete();
        this.errorOccurrence.complete();
        this._player.complete();
    }
    setupPlayerWithCurrentSetting() {
        this.setupPlayerWith(this.htmlElementId, {
            height: this.height,
            width: this.width,
            videoId: this.videoId,
            host: this.private ? this.privateHost : this.nonPrivateHost,
            playerVars: {
                autoplay: booleanToNumericBoolean(this.autoplay),
                cc_lang_pref: this.ccLangPref,
                cc_load_policy: booleanToNumericBoolean(this.ccLoadPolicy),
                color: this.color,
                controls: booleanToNumericBoolean(this.controls),
                disablekb: booleanToNumericBoolean(this.disablekb),
                enablejsapi: booleanToNumericBoolean(this.enablejsapi),
                end: this.end,
                fs: booleanToNumericBoolean(this.fs),
                hl: this.hl,
                iv_load_policy: this.ivLoadPolicy,
                list: this.list,
                listType: this.listType,
                loop: booleanToNumericBoolean(this.loop),
                modestbranding: booleanToNumericBoolean(this.modestbranding),
                origin: this.origin,
                playlist: this.playlist,
                playsinline: booleanToNumericBoolean(this.playsinline),
                rel: booleanToNumericBoolean(this.rel),
                start: this.start,
                widget_referrer: this.widgetReferrer,
            },
        });
    }
    setupPlayerWith(elementId, config) {
        const subscription = this.iFrameApi.apiChange.subscribe((api) => {
            if (!api) {
                return;
            }
            const player = new api.Player(elementId, {
                ...config,
                events: {
                    onReady: () => {
                        this.player = player;
                        this.addToPlayerManager(player);
                        this.ready.emit();
                        subscription.unsubscribe();
                    },
                    onStateChange: (event) => {
                        this.stateChange.emit(event.data);
                    },
                    onApiChange: (event) => {
                        this.apiChange.emit(event);
                    },
                    onError: (event) => {
                        this.errorOccurrence.emit(event.data);
                    },
                    onPlaybackQualityChange: (event) => {
                        this.playbackQualityChange.emit(event.data);
                    },
                    onPlaybackRateChange: (event) => {
                        this.playbackRateChange.emit(event.data);
                    },
                },
            });
        });
    }
    addToPlayerManager(newPlayer) {
        this.playerManager.add(this.id, {
            player: newPlayer,
            ready: this.ready.asObservable(),
            stateChange: this.stateChange.asObservable(),
            apiChange: this.apiChange.asObservable(),
            playbackQualityChange: this.playbackQualityChange.asObservable(),
            playbackRateChange: this.playbackRateChange.asObservable(),
            errorOccurrence: this.errorOccurrence.asObservable(),
        });
    }
}
YouTubePlayerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: YouTubePlayerComponent, deps: [{ token: i1.YouTubePlayerManagerService }, { token: i1.YouTubeIFrameApiService }], target: i0.ɵɵFactoryTarget.Component });
YouTubePlayerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.1", type: YouTubePlayerComponent, selector: "g-youtube-player", inputs: { autoplay: "autoplay", ccLangPref: "ccLangPref", ccLoadPolicy: "ccLoadPolicy", color: "color", controls: "controls", disablekb: "disablekb", enablejsapi: "enablejsapi", end: "end", fs: "fs", hl: "hl", ivLoadPolicy: "ivLoadPolicy", list: "list", listType: "listType", loop: "loop", modestbranding: "modestbranding", origin: "origin", playlist: "playlist", playsinline: "playsinline", rel: "rel", start: "start", widgetReferrer: "widgetReferrer", private: "private", id: "id", height: "height", width: "width", videoId: "videoId" }, outputs: { ready: "ready", stateChange: "stateChange", playbackQualityChange: "playbackQualityChange", errorOccurrence: "errorOccurrence", playbackRateChange: "playbackRateChange", apiChange: "apiChange", playerChange: "playerChange" }, ngImport: i0, template: "<div [id]=\"htmlElementId\"></div>\n", styles: [""] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: YouTubePlayerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'g-youtube-player', template: "<div [id]=\"htmlElementId\"></div>\n", styles: [""] }]
        }], ctorParameters: function () { return [{ type: i1.YouTubePlayerManagerService }, { type: i1.YouTubeIFrameApiService }]; }, propDecorators: { ready: [{
                type: Output
            }], stateChange: [{
                type: Output
            }], playbackQualityChange: [{
                type: Output
            }], errorOccurrence: [{
                type: Output
            }], playbackRateChange: [{
                type: Output
            }], apiChange: [{
                type: Output
            }], playerChange: [{
                type: Output
            }], autoplay: [{
                type: Input
            }], ccLangPref: [{
                type: Input
            }], ccLoadPolicy: [{
                type: Input
            }], color: [{
                type: Input
            }], controls: [{
                type: Input
            }], disablekb: [{
                type: Input
            }], enablejsapi: [{
                type: Input
            }], end: [{
                type: Input
            }], fs: [{
                type: Input
            }], hl: [{
                type: Input
            }], ivLoadPolicy: [{
                type: Input
            }], list: [{
                type: Input
            }], listType: [{
                type: Input
            }], loop: [{
                type: Input
            }], modestbranding: [{
                type: Input
            }], origin: [{
                type: Input
            }], playlist: [{
                type: Input
            }], playsinline: [{
                type: Input
            }], rel: [{
                type: Input
            }], start: [{
                type: Input
            }], widgetReferrer: [{
                type: Input
            }], private: [{
                type: Input
            }], id: [{
                type: Input
            }], height: [{
                type: Input
            }], width: [{
                type: Input
            }], videoId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,