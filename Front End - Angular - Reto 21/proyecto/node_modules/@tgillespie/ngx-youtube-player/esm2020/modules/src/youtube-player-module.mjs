import { NgModule } from "@angular/core";
import { CommonModule } from "@angular/common";
import { YouTubePlayerComponent } from "../../youtube-player/src/youtube-player.component";
import { YouTubeIFrameApiService, YouTubePlayerManagerService } from "../../interfaces/src/services";
import { StandardYouTubePlayerManagerService } from "../../services/src/youtube-player-manager.service";
import { StandardYouTubeIFrameApiService } from "../../services/src/youtube-iframe-api.service";
import * as i0 from "@angular/core";
export class YouTubePlayerModule {
    static forRoot() {
        return {
            ngModule: YouTubePlayerModule,
            providers: [{
                    provide: YouTubePlayerManagerService,
                    useClass: StandardYouTubePlayerManagerService,
                },
                {
                    provide: YouTubeIFrameApiService,
                    useClass: StandardYouTubeIFrameApiService,
                },
            ]
        };
    }
}
YouTubePlayerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: YouTubePlayerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
YouTubePlayerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: YouTubePlayerModule, declarations: [YouTubePlayerComponent], imports: [CommonModule], exports: [YouTubePlayerComponent] });
YouTubePlayerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: YouTubePlayerModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: YouTubePlayerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [YouTubePlayerComponent],
                    exports: [YouTubePlayerComponent],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieW91dHViZS1wbGF5ZXItbW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy95b3V0dWJlLXBsYXllci9zcmMvbW9kdWxlcy9zcmMveW91dHViZS1wbGF5ZXItbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBc0IsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUN6RixPQUFPLEVBQUMsdUJBQXVCLEVBQUUsMkJBQTJCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRyxPQUFPLEVBQUMsbUNBQW1DLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUN0RyxPQUFPLEVBQUMsK0JBQStCLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQzs7QUFPOUYsTUFBTSxPQUFPLG1CQUFtQjtJQUU5QixNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLFNBQVMsRUFBRSxDQUFDO29CQUNSLE9BQU8sRUFBRSwyQkFBMkI7b0JBQ3BDLFFBQVEsRUFBRSxtQ0FBbUM7aUJBQzlDO2dCQUNEO29CQUNFLE9BQU8sRUFBRSx1QkFBdUI7b0JBQ2hDLFFBQVEsRUFBRSwrQkFBK0I7aUJBQzFDO2FBQ0Y7U0FDRixDQUFBO0lBQ0gsQ0FBQzs7Z0hBZlUsbUJBQW1CO2lIQUFuQixtQkFBbUIsaUJBSGYsc0JBQXNCLGFBRDNCLFlBQVksYUFFWixzQkFBc0I7aUhBRXJCLG1CQUFtQixZQUpyQixDQUFDLFlBQVksQ0FBQzsyRkFJWixtQkFBbUI7a0JBTC9CLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO29CQUN2QixZQUFZLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztvQkFDdEMsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUM7aUJBQ2xDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQge1lvdVR1YmVQbGF5ZXJDb21wb25lbnR9IGZyb20gXCIuLi8uLi95b3V0dWJlLXBsYXllci9zcmMveW91dHViZS1wbGF5ZXIuY29tcG9uZW50XCI7XG5pbXBvcnQge1lvdVR1YmVJRnJhbWVBcGlTZXJ2aWNlLCBZb3VUdWJlUGxheWVyTWFuYWdlclNlcnZpY2V9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL3NyYy9zZXJ2aWNlc1wiO1xuaW1wb3J0IHtTdGFuZGFyZFlvdVR1YmVQbGF5ZXJNYW5hZ2VyU2VydmljZX0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3NyYy95b3V0dWJlLXBsYXllci1tYW5hZ2VyLnNlcnZpY2VcIjtcbmltcG9ydCB7U3RhbmRhcmRZb3VUdWJlSUZyYW1lQXBpU2VydmljZX0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3NyYy95b3V0dWJlLWlmcmFtZS1hcGkuc2VydmljZVwiO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbWW91VHViZVBsYXllckNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtZb3VUdWJlUGxheWVyQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgWW91VHViZVBsYXllck1vZHVsZSB7XG5cbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxZb3VUdWJlUGxheWVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBZb3VUdWJlUGxheWVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbe1xuICAgICAgICAgIHByb3ZpZGU6IFlvdVR1YmVQbGF5ZXJNYW5hZ2VyU2VydmljZSxcbiAgICAgICAgICB1c2VDbGFzczogU3RhbmRhcmRZb3VUdWJlUGxheWVyTWFuYWdlclNlcnZpY2UsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBZb3VUdWJlSUZyYW1lQXBpU2VydmljZSxcbiAgICAgICAgICB1c2VDbGFzczogU3RhbmRhcmRZb3VUdWJlSUZyYW1lQXBpU2VydmljZSxcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9XG4gIH1cbn1cbiJdfQ==