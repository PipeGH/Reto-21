import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { YouTubePlayerManagerService } from "../../interfaces/src/services";
import * as i0 from "@angular/core";
export class StandardYouTubePlayerManagerService extends YouTubePlayerManagerService {
    constructor() {
        super(...arguments);
        this.map = new Map();
        this._newEntry = new Subject();
    }
    get newEntry() {
        return this._newEntry.asObservable();
    }
    add(id, data) {
        if (this.map.has(id)) {
            console.error('Player data has been overwritten for ' + id);
        }
        const rejoinedData = {
            id,
            ...data,
        };
        this._newEntry.next(rejoinedData);
        this.map.set(id, rejoinedData);
    }
    delete(id) {
        this.map.delete(id);
    }
    get(id) {
        return this.map.get(id);
    }
    has(id) {
        return this.map.has(id);
    }
}
StandardYouTubePlayerManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: StandardYouTubePlayerManagerService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
StandardYouTubePlayerManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: StandardYouTubePlayerManagerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: StandardYouTubePlayerManagerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieW91dHViZS1wbGF5ZXItbWFuYWdlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy95b3V0dWJlLXBsYXllci9zcmMvc2VydmljZXMvc3JjL3lvdXR1YmUtcGxheWVyLW1hbmFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFhLDJCQUEyQixFQUFDLE1BQU0sK0JBQStCLENBQUM7O0FBS3RGLE1BQU0sT0FBTyxtQ0FBb0MsU0FBUSwyQkFBMkI7SUFIcEY7O1FBSVUsUUFBRyxHQUE0QixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3pDLGNBQVMsR0FBd0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztLQStCeEQ7SUE3QkMsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxHQUFHLENBQUMsRUFBVSxFQUFFLElBQTRCO1FBQzFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUM3RDtRQUVELE1BQU0sWUFBWSxHQUFHO1lBQ25CLEVBQUU7WUFDRixHQUFHLElBQUk7U0FDUixDQUFDO1FBRUYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVTtRQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxHQUFHLENBQUMsRUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELEdBQUcsQ0FBQyxFQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxQixDQUFDOztnSUFoQ1UsbUNBQW1DO29JQUFuQyxtQ0FBbUMsY0FGbEMsTUFBTTsyRkFFUCxtQ0FBbUM7a0JBSC9DLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtQbGF5ZXJEYXRhLCBZb3VUdWJlUGxheWVyTWFuYWdlclNlcnZpY2V9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL3NyYy9zZXJ2aWNlc1wiO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgU3RhbmRhcmRZb3VUdWJlUGxheWVyTWFuYWdlclNlcnZpY2UgZXh0ZW5kcyBZb3VUdWJlUGxheWVyTWFuYWdlclNlcnZpY2Uge1xuICBwcml2YXRlIG1hcDogTWFwPHN0cmluZywgUGxheWVyRGF0YT4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgX25ld0VudHJ5OiBTdWJqZWN0PFBsYXllckRhdGE+ID0gbmV3IFN1YmplY3QoKTtcblxuICBnZXQgbmV3RW50cnkoKTogT2JzZXJ2YWJsZTxQbGF5ZXJEYXRhPiB7XG4gICAgcmV0dXJuIHRoaXMuX25ld0VudHJ5LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgYWRkKGlkOiBzdHJpbmcsIGRhdGE6IE9taXQ8UGxheWVyRGF0YSwgJ2lkJz4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzKGlkKSkge1xuICAgICAgY29uc29sZS5lcnJvcignUGxheWVyIGRhdGEgaGFzIGJlZW4gb3ZlcndyaXR0ZW4gZm9yICcgKyBpZCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVqb2luZWREYXRhID0ge1xuICAgICAgaWQsXG4gICAgICAuLi5kYXRhLFxuICAgIH07XG5cbiAgICB0aGlzLl9uZXdFbnRyeS5uZXh0KHJlam9pbmVkRGF0YSk7XG4gICAgdGhpcy5tYXAuc2V0KGlkLCByZWpvaW5lZERhdGEpO1xuICB9XG5cbiAgZGVsZXRlKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLm1hcC5kZWxldGUoaWQpO1xuICB9XG5cbiAgZ2V0KGlkOiBzdHJpbmcpOiBQbGF5ZXJEYXRhIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGlkKTtcbiAgfVxuXG4gIGhhcyhpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhcyhpZCk7XG4gIH1cbn1cbiJdfQ==