import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-toast-notifier.service";
export class NgxToastService {
    constructor(ngxToastService) {
        this.ngxToastService = ngxToastService;
    }
    onSuccess(title, text) {
        const notification = {
            text,
            title,
            icon: 'success',
            bgColor: this.ngxToastService.defaultConfig.config.bgColors?.success
                ? this.ngxToastService.defaultConfig.config.bgColors.success
                : this.ngxToastService.defaultConfig.default.bgColors.success,
        };
        this.ngxToastService.onShowNotification(notification);
    }
    onInfo(title, text) {
        const notification = {
            text,
            title,
            icon: 'info',
            bgColor: this.ngxToastService.defaultConfig.config.bgColors?.info
                ? this.ngxToastService.defaultConfig.config.bgColors.info
                : this.ngxToastService.defaultConfig.default.bgColors.info,
        };
        this.ngxToastService.onShowNotification(notification);
    }
    onWarning(title, text) {
        const notification = {
            text,
            title,
            icon: 'warning',
            bgColor: this.ngxToastService.defaultConfig.config.bgColors?.warning
                ? this.ngxToastService.defaultConfig.config.bgColors.warning
                : this.ngxToastService.defaultConfig.default.bgColors.warning,
        };
        this.ngxToastService.onShowNotification(notification);
    }
    onDanger(title, text) {
        const notification = {
            text,
            title,
            icon: 'danger',
            bgColor: this.ngxToastService.defaultConfig.config.bgColors?.danger
                ? this.ngxToastService.defaultConfig.config.bgColors.danger
                : this.ngxToastService.defaultConfig.default.bgColors.danger,
        };
        this.ngxToastService.onShowNotification(notification);
    }
}
NgxToastService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: NgxToastService, deps: [{ token: i1.NgxToastNotifierService }], target: i0.ɵɵFactoryTarget.Injectable });
NgxToastService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: NgxToastService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: NgxToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.NgxToastNotifierService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRvYXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdG9hc3Qtbm90aWZpZXIvc3JjL2xpYi9zZXJ2aWNlcy9uZ3gtdG9hc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFPM0MsTUFBTSxPQUFPLGVBQWU7SUFFMUIsWUFBb0IsZUFBd0M7UUFBeEMsb0JBQWUsR0FBZixlQUFlLENBQXlCO0lBQUksQ0FBQztJQUdqRSxTQUFTLENBQUMsS0FBYSxFQUFFLElBQVk7UUFDbkMsTUFBTSxZQUFZLEdBQWtCO1lBQ2xDLElBQUk7WUFDSixLQUFLO1lBQ0wsSUFBSSxFQUFFLFNBQVM7WUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPO2dCQUNsRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPO2dCQUM1RCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPO1NBQ2hFLENBQUM7UUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYSxFQUFFLElBQVk7UUFDaEMsTUFBTSxZQUFZLEdBQWtCO1lBQ2xDLElBQUk7WUFDSixLQUFLO1lBQ0wsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJO2dCQUMvRCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dCQUN6RCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJO1NBQzdELENBQUM7UUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLElBQVk7UUFDbkMsTUFBTSxZQUFZLEdBQWtCO1lBQ2xDLElBQUk7WUFDSixLQUFLO1lBQ0wsSUFBSSxFQUFFLFNBQVM7WUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPO2dCQUNsRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPO2dCQUM1RCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPO1NBQ2hFLENBQUM7UUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYSxFQUFFLElBQVk7UUFDbEMsTUFBTSxZQUFZLEdBQWtCO1lBQ2xDLElBQUk7WUFDSixLQUFLO1lBQ0wsSUFBSSxFQUFFLFFBQVE7WUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNO2dCQUNqRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUMzRCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNO1NBQy9ELENBQUM7UUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hELENBQUM7OzZHQW5EVSxlQUFlO2lIQUFmLGVBQWUsY0FGZCxNQUFNOzRGQUVQLGVBQWU7a0JBSDNCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvaS1ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgTmd4VG9hc3ROb3RpZmllclNlcnZpY2UgfSBmcm9tICcuL25neC10b2FzdC1ub3RpZmllci5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4VG9hc3RTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5neFRvYXN0U2VydmljZTogTmd4VG9hc3ROb3RpZmllclNlcnZpY2UpIHsgfVxuXG5cbiAgb25TdWNjZXNzKHRpdGxlOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbjogSU5vdGlmaWNhdGlvbiA9IHtcbiAgICAgIHRleHQsXG4gICAgICB0aXRsZSxcbiAgICAgIGljb246ICdzdWNjZXNzJyxcbiAgICAgIGJnQ29sb3I6IHRoaXMubmd4VG9hc3RTZXJ2aWNlLmRlZmF1bHRDb25maWcuY29uZmlnLmJnQ29sb3JzPy5zdWNjZXNzXG4gICAgICAgID8gdGhpcy5uZ3hUb2FzdFNlcnZpY2UuZGVmYXVsdENvbmZpZy5jb25maWcuYmdDb2xvcnMuc3VjY2Vzc1xuICAgICAgICA6IHRoaXMubmd4VG9hc3RTZXJ2aWNlLmRlZmF1bHRDb25maWcuZGVmYXVsdC5iZ0NvbG9ycy5zdWNjZXNzLFxuICAgIH07XG4gICAgdGhpcy5uZ3hUb2FzdFNlcnZpY2Uub25TaG93Tm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XG4gIH1cblxuICBvbkluZm8odGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uOiBJTm90aWZpY2F0aW9uID0ge1xuICAgICAgdGV4dCxcbiAgICAgIHRpdGxlLFxuICAgICAgaWNvbjogJ2luZm8nLFxuICAgICAgYmdDb2xvcjogdGhpcy5uZ3hUb2FzdFNlcnZpY2UuZGVmYXVsdENvbmZpZy5jb25maWcuYmdDb2xvcnM/LmluZm9cbiAgICAgICAgPyB0aGlzLm5neFRvYXN0U2VydmljZS5kZWZhdWx0Q29uZmlnLmNvbmZpZy5iZ0NvbG9ycy5pbmZvXG4gICAgICAgIDogdGhpcy5uZ3hUb2FzdFNlcnZpY2UuZGVmYXVsdENvbmZpZy5kZWZhdWx0LmJnQ29sb3JzLmluZm8sXG4gICAgfTtcbiAgICB0aGlzLm5neFRvYXN0U2VydmljZS5vblNob3dOb3RpZmljYXRpb24obm90aWZpY2F0aW9uKTtcbiAgfVxuXG4gIG9uV2FybmluZyh0aXRsZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBub3RpZmljYXRpb246IElOb3RpZmljYXRpb24gPSB7XG4gICAgICB0ZXh0LFxuICAgICAgdGl0bGUsXG4gICAgICBpY29uOiAnd2FybmluZycsXG4gICAgICBiZ0NvbG9yOiB0aGlzLm5neFRvYXN0U2VydmljZS5kZWZhdWx0Q29uZmlnLmNvbmZpZy5iZ0NvbG9ycz8ud2FybmluZ1xuICAgICAgICA/IHRoaXMubmd4VG9hc3RTZXJ2aWNlLmRlZmF1bHRDb25maWcuY29uZmlnLmJnQ29sb3JzLndhcm5pbmdcbiAgICAgICAgOiB0aGlzLm5neFRvYXN0U2VydmljZS5kZWZhdWx0Q29uZmlnLmRlZmF1bHQuYmdDb2xvcnMud2FybmluZyxcbiAgICB9O1xuICAgIHRoaXMubmd4VG9hc3RTZXJ2aWNlLm9uU2hvd05vdGlmaWNhdGlvbihub3RpZmljYXRpb24pO1xuICB9XG5cbiAgb25EYW5nZXIodGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uOiBJTm90aWZpY2F0aW9uID0ge1xuICAgICAgdGV4dCxcbiAgICAgIHRpdGxlLFxuICAgICAgaWNvbjogJ2RhbmdlcicsXG4gICAgICBiZ0NvbG9yOiB0aGlzLm5neFRvYXN0U2VydmljZS5kZWZhdWx0Q29uZmlnLmNvbmZpZy5iZ0NvbG9ycz8uZGFuZ2VyXG4gICAgICAgID8gdGhpcy5uZ3hUb2FzdFNlcnZpY2UuZGVmYXVsdENvbmZpZy5jb25maWcuYmdDb2xvcnMuZGFuZ2VyXG4gICAgICAgIDogdGhpcy5uZ3hUb2FzdFNlcnZpY2UuZGVmYXVsdENvbmZpZy5kZWZhdWx0LmJnQ29sb3JzLmRhbmdlcixcbiAgICB9O1xuICAgIHRoaXMubmd4VG9hc3RTZXJ2aWNlLm9uU2hvd05vdGlmaWNhdGlvbihub3RpZmljYXRpb24pO1xuICB9XG59XG4iXX0=